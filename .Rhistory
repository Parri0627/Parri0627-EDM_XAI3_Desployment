d <- read.csv("kc_house_data.csv")
sampled <- sample_n(d, 1000)
sampled <- select(sample, bedrooms, bathrooms, sqft_living, sqft_lot, floors, yr_built, price)
d <- read.csv("kc_house_data.csv")
sampled <- sample_n(d, 1000)
sampled <- select(sampled, bedrooms, bathrooms, sqft_living, sqft_lot, floors, yr_built, price)
rf <- randomForest(price~., data=sampled)
results <- select(sampled, bedrooms, bathrooms, sqft_living, floors, cnt)
d <- read.csv("kc_house_data.csv")
sampled <- sample_n(d, 1000)
sampled <- select(sampled, bedrooms, bathrooms, sqft_living, sqft_lot, floors, yr_built, price)
rf <- randomForest(price~., data=sampled)
results <- select(sampled, bedrooms, bathrooms, sqft_living, floors, price)
nr <- nrow(sampled)
for(c in names(results)[1:4])
{
for(i in 1:nr){
r <- sampled
r[[c]] <- sampled[[c]][i]
sal <- predict(rf, r)
results[[c]][i] <- sum(sal) / nr
}
}
p1 <- ggplot(sampled, aes(x=bedrooms, y=results$bedrooms)) + geom_line() +ylim(c(0,6000))+ geom_rug(alpha = 0.1, sides = "b") + ylab("Prediction") + xlab("Bedrooms")
p2 <- ggplot(sampled, aes(x=bathrooms, y=results$bathrooms)) + geom_line() +ylim(c(0,6000))+ geom_rug(alpha = 0.1, sides = "b")+ xlab("Bathrooms")
p3 <- ggplot(sampled, aes(x=sqft_living, y=results$sqft_living)) + geom_line() +ylim(c(0,6000))+ geom_rug(alpha = 0.1, sides = "b")+ xlab("Sqft Living")
p4 <- ggplot(sampled, aes(x=floors, y=results$floors)) + geom_line() +ylim(c(0,6000))+ geom_rug(alpha = 0.1, sides = "b")+ xlab("Floors")
subplot(p1,p2,p3,p4, shareY = TRUE, shareX = FALSE, titleX = TRUE)
p1 <- ggplot(sampled, aes(x=bedrooms, y=results$bedrooms)) + geom_line() + geom_rug(alpha = 0.1, sides = "b") + ylab("Prediction") + xlab("Bedrooms")
p2 <- ggplot(sampled, aes(x=bathrooms, y=results$bathrooms)) + geom_line() + geom_rug(alpha = 0.1, sides = "b")+ xlab("Bathrooms")
p3 <- ggplot(sampled, aes(x=sqft_living, y=results$sqft_living)) + geom_line() + geom_rug(alpha = 0.1, sides = "b")+ xlab("Sqft Living")
p4 <- ggplot(sampled, aes(x=floors, y=results$floors)) + geom_line() + geom_rug(alpha = 0.1, sides = "b")+ xlab("Floors")
subplot(p1,p2,p3,p4, shareY = TRUE, shareX = FALSE, titleX = TRUE)
p1 <- ggplot(sampled, aes(x=bedrooms, y=results$bedrooms)) + geom_line() + geom_rug(alpha = 0.1, sides = "b") + ylab("Prediction") + xlab("Bedrooms")
p2 <- ggplot(sampled, aes(x=bathrooms, y=results$bathrooms)) + geom_line() + geom_rug(alpha = 0.1, sides = "b")+ xlab("Bathrooms")
p3 <- ggplot(sampled, aes(x=sqft_living, y=results$sqft_living)) + geom_line() + geom_rug(alpha = 0.1, sides = "b")+ xlab("Sqft Living")
p4 <- ggplot(sampled, aes(x=floors, y=results$floors)) + geom_line() + geom_rug(alpha = 0.1, sides = "b")+ xlab("Floors")
subplot(p1,p2,p3,p4, shareX = FALSE, titleX = TRUE)
library(dplyr)
library(plotly)
library(reshape2)
library(lubridate)
library(randomForest)
setwd("/Users/cmonserr/OneDrive - UPV/Trabajo_2/Asignaturas/Evaluacion de modelos/Practicas/Practica 3/Bike-Sharing-Dataset")
days <- read.csv("day.csv")
hour <- read.csv("hour.csv")
days$dteday <- as_date(days$dteday)
days_since <- select(days, workingday, holiday, temp, hum, windspeed, cnt)
days_since$days_since_2011 <- int_length(interval(ymd("2011-01-01"), days$dteday)) / (3600*24)
days_since$SUMMER <- ifelse(days$season == 3, 1, 0)
days_since$FALL <- ifelse(days$season == 4, 1, 0)
days_since$WINTER <- ifelse(days$season == 1, 1, 0)
days_since$MISTY <- ifelse(days$weathersit == 2, 1, 0)
days_since$RAIN <- ifelse(days$weathersit == 3 | days$weathersit == 4, 1, 0)
days_since$temp <- days_since$temp * 47 - 8
days_since$hum <- days_since$hum * 100
days_since$windspeed <- days_since$windspeed * 67
rf <- randomForest(cnt~., data=days_since)
results <- select(days_since, days_since_2011, temp, hum, windspeed, cnt)
nr <- nrow(days_since)
for(c in names(results)[1:4])
{
for(i in 1:nr){
r <- days_since
r[[c]] <- days_since[[c]][i]
sal <- predict(rf, r)
results[[c]][i] <- sum(sal) / nr
}
}
library(dplyr)
library(plotly)
library(reshape2)
library(lubridate)
library(randomForest)
setwd("/Users/cmonserr/OneDrive - UPV/Trabajo_2/Asignaturas/Evaluacion de modelos/Practicas/Practica 3/Bike-Sharing-Dataset")
days <- read.csv("day.csv")
hour <- read.csv("hour.csv")
days$dteday <- as_date(days$dteday)
days_since <- select(days, workingday, holiday, temp, hum, windspeed, cnt)
days_since$days_since_2011 <- int_length(interval(ymd("2011-01-01"), days$dteday)) / (3600*24)
days_since$SUMMER <- ifelse(days$season == 3, 1, 0)
days_since$FALL <- ifelse(days$season == 4, 1, 0)
days_since$WINTER <- ifelse(days$season == 1, 1, 0)
days_since$MISTY <- ifelse(days$weathersit == 2, 1, 0)
days_since$RAIN <- ifelse(days$weathersit == 3 | days$weathersit == 4, 1, 0)
days_since$temp <- days_since$temp * 47 - 8
days_since$hum <- days_since$hum * 100
days_since$windspeed <- days_since$windspeed * 67
rf <- randomForest(cnt~., data=days_since)
results <- select(days_since, days_since_2011, temp, hum, windspeed, cnt)
nr <- nrow(days_since)
for(c in names(results)[1:4])
{
for(i in 1:nr){
r <- days_since
r[[c]] <- days_since[[c]][i]
sal <- predict(rf, r)
results[[c]][i] <- sum(sal) / nr
}
}
p1 <- ggplot(days_since, aes(x=days_since_2011, y=results$days_since_2011)) + geom_line() +ylim(c(0,6000))+ geom_rug(alpha = 0.1, sides = "b") + ylab("Prediction") + xlab("Days since 2011")
p2 <- ggplot(days_since, aes(x=temp, y=results$temp)) + geom_line() +ylim(c(0,6000))+ geom_rug(alpha = 0.1, sides = "b")+ xlab("Temperature")
p3 <- ggplot(days_since, aes(x=hum, y=results$hum)) + geom_line() +ylim(c(0,6000))+ geom_rug(alpha = 0.1, sides = "b")+ xlab("Humidity")
p4 <- ggplot(days_since, aes(x=windspeed, y=results$windspeed)) + geom_line() +ylim(c(0,6000))+ geom_rug(alpha = 0.1, sides = "b")+ xlab("Wind speed")
subplot(p1,p2,p3,p4, shareY = TRUE, shareX = FALSE, titleX = TRUE)
library(tictoc)
sampled <- sample_n(days_since, 40)
temp <- sampled$temp
hum <- sampled$hum
th <- inner_join(data.frame(temp),data.frame(hum), by=character())
th$p <- 0
tic("entra")
for(i in 1:nrow(th)){
r <- days_since
r[["temp"]] <- th[["temp"]][i]
r[["hum"]] <- th[["hum"]][i]
sal <- predict(rf, r)
th[["p"]][i] <- sum(sal) / nr
}
toc()
ggplot(th, aes(x=temp, y=hum)) + geom_tile(aes(fill = p, width = 10, height = 15)) + geom_rug(alpha = 0.01) + xlab("Temperature") + ylab("Humidity") + scale_fill_gradient(name = "Number of bikes")
setwd("/Users/cmonserr/OneDrive - UPV/Trabajo_2/Asignaturas/Evaluacion de modelos/Practicas/Practica 5")
d <- read.csv("kc_house_data.csv")
sampled <- sample_n(d, 1000)
sampled <- select(sampled, bedrooms, bathrooms, sqft_living, sqft_lot, floors, yr_built, price)
rf <- randomForest(price~., data=sampled)
results <- select(sampled, bedrooms, bathrooms, sqft_living, floors, price)
nr <- nrow(sampled)
for(c in names(results)[1:4])
{
for(i in 1:nr){
r <- sampled
r[[c]] <- sampled[[c]][i]
sal <- predict(rf, r)
results[[c]][i] <- sum(sal) / nr
}
}
p1 <- ggplot(sampled, aes(x=bedrooms, y=results$bedrooms)) + geom_line() + geom_rug(alpha = 0.1, sides = "b") + ylab("Prediction") + xlab("Bedrooms")
p2 <- ggplot(sampled, aes(x=bathrooms, y=results$bathrooms)) + geom_line() + geom_rug(alpha = 0.1, sides = "b")+ xlab("Bathrooms")
p3 <- ggplot(sampled, aes(x=sqft_living, y=results$sqft_living)) + geom_line() + geom_rug(alpha = 0.1, sides = "b")+ xlab("Sqft Living")
p4 <- ggplot(sampled, aes(x=floors, y=results$floors)) + geom_line() + geom_rug(alpha = 0.1, sides = "b")+ xlab("Floors")
subplot(p1,p2,p3,p4, shareX = FALSE, titleX = TRUE)
library(dplyr)
library(plotly)
library(reshape2)
library(lubridate)
library(randomForest)
#days <- read.csv("day.csv")
#hour <- read.csv("hour.csv")
days$dteday <- as_date(days$dteday)
library(dplyr)
library(plotly)
library(reshape2)
library(lubridate)
library(randomForest)
#days <- read.csv("day.csv")
#hour <- read.csv("hour.csv")
# sampled <- sample_n(......, 40)
#d <- read.csv("kc_house_data.csv")
#sampled <- sample_n(d, 1000)
kc=read.csv("kc_house_data.csv")
View(kc)
rc = randomForest(price ~ bedrooms+bathrooms+sqft_living +sqft_lot + floors +  yr_built, data = kc)
library(readr)
library(pROC)
library(dplyr)
library(ggplot2)
library(randomForest)
library(plotly)
library(partykit)
library(pre)
library(pdp)
library(grid)
library(gridExtra)
library(fairness)
library(caret)
library(mlbench)
library(gridExtra)
kc=read.csv("kc_house_data.csv")
rc = randomForest(price ~ bedrooms+bathrooms+sqft_living +sqft_lot + floors +  yr_built, data = kc)
library(readr)
library(pROC)
library(dplyr)
library(ggplot2)
library(randomForest)
library(plotly)
library(partykit)
library(pre)
library(pdp)
library(grid)
library(gridExtra)
library(fairness)
library(caret)
library(mlbench)
library(gridExtra)
kc=read.csv("kc_house_data.csv")
kc2 = kc %>% sample_n(500)
rc = randomForest(price ~ bedrooms+bathrooms+sqft_living +sqft_lot + floors +  yr_built, data = kc2)
summary(rc)
pdp_data = partial(rc, pred.var = c("bedrooms", "bathrooms","sqft_living","sqft_lot","floors","yr_built"))
<-
bed = partial(rc, pred.var = "bedrooms", plot = TRUE, plot.engine = "ggplot2")
bath = partial(rc, pred.var = "bathrooms", plot = TRUE, plot.engine = "ggplot2")
sqtf = partial(rc, pred.var = "sqft_living", plot = TRUE, plot.engine = "ggplot2")
floor = partial(rc, pred.var = "floors", plot = TRUE, plot.engine = "ggplot2")
grid.arrange(bed, bath, sqtf, floor, ncol = 2)
library(readr)
library(pROC)
library(dplyr)
library(ggplot2)
library(randomForest)
library(plotly)
library(partykit)
library(pre)
library(pdp)
library(grid)
library(gridExtra)
library(fairness)
library(caret)
library(mlbench)
library(gridExtra)
datos = read.csv("./day.csv")
datos$Winter = ifelse(datos$season == 1, 1, 0)
datos$Spring = ifelse(datos$season == 2, 1, 0)
datos$Summer = ifelse(datos$season == 3, 1, 0)
datos$Fall = ifelse(datos$season == 4, 1, 0)
datos$Misty = ifelse(datos$weathersit == 2, 1, 0)
datos$rain = ifelse(datos$weathersit == 3 | datos$weathersit == 4, 1, 0)
datos$hum = datos$hum * 100
datos$windspeed = datos$windspeed * 67
datos$temp = datos$temp * (39 - (-8)) + (-8)
datos$days_since_2011 = 1:length(datos$dteday)
rf= randomForest(cnt ~ workingday + holiday + Spring + Summer + Fall + Misty + rain + temp + hum + windspeed + days_since_2011, data = datos)
summary(rf)
days = partial(random_forest, pred.var = "days_since_2011", plot = TRUE, plot.engine = "ggplot2")
library(readr)
library(pROC)
library(dplyr)
library(ggplot2)
library(randomForest)
library(plotly)
library(partykit)
library(pre)
library(pdp)
library(grid)
library(gridExtra)
library(fairness)
library(caret)
library(mlbench)
library(gridExtra)
datos = read.csv("./day.csv")
datos$Winter = ifelse(datos$season == 1, 1, 0)
datos$Spring = ifelse(datos$season == 2, 1, 0)
datos$Summer = ifelse(datos$season == 3, 1, 0)
datos$Fall = ifelse(datos$season == 4, 1, 0)
datos$Misty = ifelse(datos$weathersit == 2, 1, 0)
datos$rain = ifelse(datos$weathersit == 3 | datos$weathersit == 4, 1, 0)
datos$hum = datos$hum * 100
datos$windspeed = datos$windspeed * 67
datos$temp = datos$temp * (39 - (-8)) + (-8)
datos$days_since_2011 = 1:length(datos$dteday)
rf= randomForest(cnt ~ workingday + holiday + Spring + Summer + Fall + Misty + rain + temp + hum + windspeed + days_since_2011, data = datos)
summary(rf)
days = partial(random_forest, pred.var = "days_since_2011", plot = TRUE, plot.engine = "ggplot2")
days = partial(rf, pred.var = "days_since_2011", plot = TRUE, plot.engine = "ggplot2")
temp = partial(rf, pred.var = "temp", plot = TRUE, plot.engine = "ggplot2")
hum = partial(rf, pred.var = "hum", plot = TRUE, plot.engine = "ggplot2")
wind = partial(rf, pred.var = "windspeed", plot = TRUE, plot.engine = "ggplot2")
grid.arrange(days_2011, temperature, humidity, windspeed, ncol = 2)
days = partial(rf, pred.var = "days_since_2011", plot = TRUE, plot.engine = "ggplot2")
temp = partial(rf, pred.var = "temp", plot = TRUE, plot.engine = "ggplot2")
hum = partial(rf, pred.var = "hum", plot = TRUE, plot.engine = "ggplot2")
wind = partial(rf, pred.var = "windspeed", plot = TRUE, plot.engine = "ggplot2")
grid.arrange(days, temp, hum, wind, ncol = 2)
sample_data = datos %>% sample_n(500)
random_forest_model = randomForest(cnt ~ workingday + holiday + Spring + Summer + Fall + Misty + rain + temp + hum + windspeed + days_since_2011, data = sample_data)
pdp_data = partial(random_forest_model, pred.var = c("temp", "hum"))
ggplot(pdp_data, aes(x = temp, y = hum, fill = yhat)) +
geom_tile(width = 3, height = 3)+
labs(title = "2D Partial Dependency Plot",
x = "Temperature (Celsius)",
y = "Humidity (%)",
fill = "Predicted Bikes Rented") +
geom_density2d() +
scale_fill_gradient(low = "yellow", high = "red")+
theme_minimal()
library(readr)
library(pROC)
library(dplyr)
library(ggplot2)
library(plotly)
library(grid)
library(gridExtra)
library(fairness)
library(caret)
library(mlbench)
library(pre)
library(partykit)
compas_data = read.csv("./compas-scores-two-years.csv")
clean_compas = compas_data[
compas_data$days_b_screening_arrest <= 30 &
compas_data$days_b_screening_arrest >= -30 &
compas_data$is_recid != -1 &
!is.na(compas_data$score_text) &
compas_data$c_charge_degree != "O", ]
compas_elegidos = clean_compas[ clean_compas$race %in% c("African-American", "Caucasian"), ]
logistic_model = glm(decile_score >= 4 ~ sex + age + race + is_recid,  data = compas_elegidos,  family = "binomial")
summary(logistic_model)
odds_df = data.frame(
weights=coef(logistic_model)[-1],
odds_ratio = exp(coef(logistic_model))[-1],
std_error = summary(logistic_model)$coef[, "Std. Error"][-1],
features = names(coef(logistic_model))[-1]
)
odds_df
odds_df = odds_df[order(odds_df$odds_ratio, decreasing = TRUE), ]
library(ggplot2)
ggplot(odds_df, aes(x = reorder(features, odds_ratio), y = odds_ratio, fill = features)) +
geom_col(color = "black") +
labs(x = "Features", y = "Odds") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
datos = read.csv("./Bike-Sharing-Dataset/day.csv")
datos$Winter=ifelse(datos$season == 1, 1, 0)
datos$Spring=ifelse(datos$season == 2, 1, 0)
datos$Summer=ifelse(datos$season == 3, 1, 0)
datos$Fall=ifelse(datos$season == 4, 1, 0)
datos$Misty=ifelse(datos$weathersit == 2, 1, 0)
datos$rain=ifelse(datos$weathersit == 3 | datos$weathersit == 4, 1, 0)
datos$hum=datos$hum*100
datos$windspeed=datos$windspeed*67
datos$temp = datos$temp * (39 - (-8)) + (-8)
datos$days_since_2011=1:length(datos$dteday)
decision_tree = ctree(cnt ~ workingday + holiday + Spring + Summer + Fall + Misty + rain + temp + hum + windspeed + days_since_2011, data = datos,  maxdepth = 2)
plot(decision_tree)
reglas=pre(cnt ~ workingday + holiday + Spring + Summer + Fall + Misty + rain + temp + hum + windspeed + days_since_2011, data = datos,  maxdepth = 2,family="gaussian")
reglas
coeficientes=coef(reglas)
coeficientes
coeficientes=coeficientes[coeficientes$coefficient!=0,]
coeficientes
importantes=importance(reglas)
importantes_4=importantes$baseimps[1:4,]
importantes_4= importantes_4[complete.cases(importantes_4)]
importantes_4
importantes_vars_4=importantes$varimps
importantes_vars_4=importantes_vars_4[order(importantes_vars_4$imp, decreasing = TRUE),]
plot_ly(data = importantes_vars_4, x = reorder(importantes_vars_4$varname,importantes_vars_4$imp), y = importantes_vars_4$imp) %>% layout( xaxis = list(title = "Importance"), title = list(text = "Importance Plot") )
library(readr)
library(pROC)
library(dplyr)
library(ggplot2)
library(randomForest)
library(plotly)
library(grid)
library(gridExtra)
library(fairness)
library(caret)
library(mlbench)
library(partykit)
library(pre)
library(pdp)
bike <- read.csv("day.csv")
# One-hot encoding for season
bike <- bike %>%
mutate(SPRING = ifelse(season == 1, 1, 0),
SUMMER = ifelse(season == 2, 1, 0),
FALL = ifelse(season == 3, 1, 0),
WINTER = ifelse(season == 4,1,0))
# Create the MISTY and RAIN features
bike$MISTY <- ifelse(bike$weathersit == 2, 1, 0)
bike$RAIN <- ifelse(bike$weathersit %in% c(3, 4), 1, 0)
# Denormalization
bike$temp <- bike$temp * 41
bike$hum <- bike$hum * 100
bike$windspeed <- bike$windspeed * 67
# Create days_since_2011 feature
bike$days_since_2011 <- as.integer(difftime(as.Date(bike$dteday), as.Date("2011-01-01"), units = "days"))
# Random Forest
random_forest <- randomForest(cnt ~ workingday + holiday + SUMMER + FALL + WINTER + MISTY + RAIN + temp + hum + windspeed + days_since_2011, data = bike, ntree = 400, mtry = 3)
random_forest
summary(random_forest)
# PDP
days_2011 <- partial(random_forest, pred.var = "days_since_2011", plot = TRUE, plot.engine = "ggplot2")
temperature <- partial(random_forest, pred.var = "temp", plot = TRUE, plot.engine = "ggplot2")
humidity <- partial(random_forest, pred.var = "hum", plot = TRUE, plot.engine = "ggplot2")
windspeed <- partial(random_forest, pred.var = "windspeed", plot = TRUE, plot.engine = "ggplot2")
days_2011
temperature
humidity
windspeed
set.seed(150)
bike_sample <- bike %>% sample_n(200)
random_forest_bike <- randomForest(cnt ~workingday + holiday + SUMMER + FALL + WINTER + MISTY + RAIN + temp + hum + windspeed + days_since_2011, data = bike_sample, ntree = 400, mtry = 3)
pdp_tem_hum <- partial(random_forest_bike, pred.var = c("temp", "hum"), plot = FALSE)
ggplot(pdp_tem_hum, aes(x = temp, y = hum, fill = yhat)) +
geom_tile(aes(width = 3, height = 3)) +
scale_fill_gradient(low = "white", high = "red") +
geom_density2d() +
theme_bw() +
xlab("Temperature") +
ylab("Humidity") +
ggtitle("Bidimensional Partial Dependency Plot")
house <- read.csv("kc_house_data.csv")
# Select random samples
set.seed(150)
house_sample <- house %>% sample_n(900)
# Fit random forest model
random_forest_house <- randomForest(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + yr_built, data = house_sample, ntree = 400, mtry = 3)
# Generate partial dependence plot for selected features
bedrooms <- partial(random_forest_house, pred.var = c("bedrooms"), plot = TRUE, plot.engine = "ggplot2")
bathrooms <- partial(random_forest_house, pred.var = c("bathrooms"), plot = TRUE, plot.engine = "ggplot2")
sqft <- partial(random_forest_house, pred.var = c("sqft_living"), plot = TRUE, plot.engine = "ggplot2")
floors <- partial(random_forest_house, pred.var = c("floors"), plot = TRUE, plot.engine = "ggplot2")
bedrooms
bathrooms
sqft
floors
bed
bed = partial(rc, pred.var = "bedrooms", plot = TRUE, plot.engine = "ggplot2")
bath = partial(rc, pred.var = "bathrooms", plot = TRUE, plot.engine = "ggplot2")
sqtf = partial(rc, pred.var = "sqft_living", plot = TRUE, plot.engine = "ggplot2")
floor = partial(rc, pred.var = "floors", plot = TRUE, plot.engine = "ggplot2")
grid.arrange(bed, bath, sqtf, floor, ncol = 2)
bed
library(readr)
library(pROC)
library(dplyr)
library(ggplot2)
library(randomForest)
library(plotly)
library(partykit)
library(pre)
library(pdp)
library(grid)
library(gridExtra)
library(fairness)
library(caret)
library(mlbench)
library(gridExtra)
set.seed(4)
datos = read.csv("./day.csv")
datos$Winter = ifelse(datos$season == 1, 1, 0)
datos$Spring = ifelse(datos$season == 2, 1, 0)
datos$Summer = ifelse(datos$season == 3, 1, 0)
datos$Fall = ifelse(datos$season == 4, 1, 0)
datos$Misty = ifelse(datos$weathersit == 2, 1, 0)
datos$rain = ifelse(datos$weathersit == 3 | datos$weathersit == 4, 1, 0)
datos$hum = datos$hum * 100
datos$windspeed = datos$windspeed * 67
datos$temp = datos$temp * (39 - (-8)) + (-8)
datos$days_since_2011 = 1:length(datos$dteday)
rf= randomForest(cnt ~ workingday + holiday + Spring + Summer + Fall + Misty + rain + temp + hum + windspeed + days_since_2011, data = datos)
summary(rf)
days = partial(rf, pred.var = "days_since_2011", plot = TRUE, plot.engine = "ggplot2")
temp = partial(rf, pred.var = "temp", plot = TRUE, plot.engine = "ggplot2")
hum = partial(rf, pred.var = "hum", plot = TRUE, plot.engine = "ggplot2")
wind = partial(rf, pred.var = "windspeed", plot = TRUE, plot.engine = "ggplot2")
grid.arrange(days, temp, hum, wind, ncol = 2)
sample_data = datos %>% sample_n(500)
random_forest_model = randomForest(cnt ~ workingday + holiday + Spring + Summer + Fall + Misty + rain + temp + hum + windspeed + days_since_2011, data = sample_data)
pdp_data = partial(random_forest_model, pred.var = c("temp", "hum"))
ggplot(pdp_data, aes(x = temp, y = hum, fill = yhat)) +
geom_tile(width = 3, height = 3)+
labs(title = "2D Partial Dependency Plot",
x = "Temperature (Celsius)",
y = "Humidity (%)",
fill = "Predicted Bikes Rented") +
geom_density2d() +
scale_fill_gradient(low = "yellow", high = "red")+
theme_minimal()
kc=read.csv("kc_house_data.csv")
kc2 = kc %>% sample_n(500)
rc = randomForest(price ~ bedrooms+bathrooms+sqft_living +sqft_lot + floors +  yr_built, data = kc2)
summary(rc)
bed = partial(rc, pred.var = "bedrooms", plot = TRUE, plot.engine = "ggplot2")
bath = partial(rc, pred.var = "bathrooms", plot = TRUE, plot.engine = "ggplot2")
sqtf = partial(rc, pred.var = "sqft_living", plot = TRUE, plot.engine = "ggplot2")
floor = partial(rc, pred.var = "floors", plot = TRUE, plot.engine = "ggplot2")
grid.arrange(bed, bath, sqtf, floor, ncol = 2)
bed
grid.arrange(bed, bath, sqtf, floor, ncol = 2)
sample_data = datos %>% sample_n(800)
sample_data = datos %>% sample_n(500)
random_forest_model = randomForest(cnt ~ workingday + holiday + Spring + Summer + Fall + Misty + rain + temp + hum + windspeed + days_since_2011, data = sample_data)
pdp_data = partial(random_forest_model, pred.var = c("temp", "hum"))
ggplot(pdp_data, aes(x = temp, y = hum, fill = yhat)) +
geom_tile(width = 3, height = 3)+
labs(title = "2D Partial Dependency Plot",
x = "Temperature (Celsius)",
y = "Humidity (%)",
fill = "Predicted Bikes Rented") +
geom_density2d() +
scale_fill_gradient(low = "yellow", high = "red")+
theme_minimal()
kc=read.csv("kc_house_data.csv")
kc2 = kc %>% sample_n(800)
rc = randomForest(price ~ bedrooms+bathrooms+sqft_living +sqft_lot + floors +  yr_built, data = kc2)
summary(rc)
bed = partial(rc, pred.var = "bedrooms", plot = TRUE, plot.engine = "ggplot2")
bath = partial(rc, pred.var = "bathrooms", plot = TRUE, plot.engine = "ggplot2")
sqtf = partial(rc, pred.var = "sqft_living", plot = TRUE, plot.engine = "ggplot2")
floor = partial(rc, pred.var = "floors", plot = TRUE, plot.engine = "ggplot2")
grid.arrange(bed, bath, sqtf, floor, ncol = 2)
kc=read.csv("kc_house_data.csv")
kc2 = kc %>% sample_n(600)
rc = randomForest(price ~ bedrooms+bathrooms+sqft_living +sqft_lot + floors +  yr_built, data = kc2)
summary(rc)
bed = partial(rc, pred.var = "bedrooms", plot = TRUE, plot.engine = "ggplot2")
bath = partial(rc, pred.var = "bathrooms", plot = TRUE, plot.engine = "ggplot2")
sqtf = partial(rc, pred.var = "sqft_living", plot = TRUE, plot.engine = "ggplot2")
floor = partial(rc, pred.var = "floors", plot = TRUE, plot.engine = "ggplot2")
grid.arrange(bed, bath, sqtf, floor, ncol = 2)
